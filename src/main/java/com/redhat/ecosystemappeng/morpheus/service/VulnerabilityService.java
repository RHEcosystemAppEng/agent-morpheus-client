package com.redhat.ecosystemappeng.morpheus.service;

import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;

import com.redhat.ecosystemappeng.morpheus.model.PaginatedResult;
import com.redhat.ecosystemappeng.morpheus.model.Pagination;
import com.redhat.ecosystemappeng.morpheus.model.Vulnerability;
import com.redhat.ecosystemappeng.morpheus.model.VulnerabilityFilter;
import com.redhat.ecosystemappeng.morpheus.model.VulnerabilitySort;

import jakarta.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class VulnerabilityService {

  private final Map<String, Vulnerability> vulnerabilities = new HashMap<>();

  public void set(String id, Vulnerability vuln) {
    vulnerabilities.put(id, vuln);
  }

  public void delete(String id) {
    vulnerabilities.remove(id);
  }

  public Vulnerability get(String id) {
    return vulnerabilities.get(id);
  }

  private long count(VulnerabilityFilter filter) {
    return vulnerabilities.values().stream().filter(filter::filterByVulnIdLike).count();
  }

  public PaginatedResult<Vulnerability> list(VulnerabilityFilter filter, VulnerabilitySort sort,
      Pagination pagination) {

    var totalElements = count(filter);
    var results = vulnerabilities.values()
        .stream()
        .filter(filter::filterByVulnIdLike)
        .sorted(sort::compare);
    if (pagination == null) {
      return new PaginatedResult<>(totalElements, 1, results);
    }
    var totalPages = (long) Math.ceil((double) totalElements / pagination.size());

    var skip = pagination.size() * pagination.page();
    return new PaginatedResult<>(totalElements, totalPages, results.skip(skip).limit(pagination.size()));
  }
}
