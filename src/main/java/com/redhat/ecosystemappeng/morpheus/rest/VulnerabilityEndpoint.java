package com.redhat.ecosystemappeng.morpheus.rest;

import java.util.List;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.redhat.ecosystemappeng.morpheus.model.Pagination;
import com.redhat.ecosystemappeng.morpheus.model.SortField;
import com.redhat.ecosystemappeng.morpheus.model.UserComments;
import com.redhat.ecosystemappeng.morpheus.model.Vulnerability;
import com.redhat.ecosystemappeng.morpheus.service.VulnerabilityRepositoryService;

import jakarta.inject.Inject;
import jakarta.ws.rs.Consumes;
import jakarta.ws.rs.DELETE;
import jakarta.ws.rs.DefaultValue;
import jakarta.ws.rs.GET;
import jakarta.ws.rs.NotFoundException;
import jakarta.ws.rs.PUT;
import jakarta.ws.rs.Path;
import jakarta.ws.rs.PathParam;
import jakarta.ws.rs.Produces;
import jakarta.ws.rs.QueryParam;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;

@Path("/vulnerabilities")
@Consumes(MediaType.APPLICATION_JSON)
public class VulnerabilityEndpoint {

  @Inject
  VulnerabilityRepositoryService repository;

  @Inject
  ObjectMapper objectMapper;

  @Inject
  UserComments userComments;

  @GET
  @Path("/{vuln_id}/comments")
  @Produces(MediaType.TEXT_PLAIN)
  public String getComments(@PathParam("vuln_id") String id) {
    return get(id).comments();
  }

  @PUT
  @Path("/{vuln_id}")
  public Response set(@PathParam("vuln_id") String id, Vulnerability vulnerability) {
    repository.persistOrUpdate(vulnerability);
    return Response.ok().build();
  }

  @GET
  public Response list(
      @QueryParam("sortBy") @DefaultValue("_id:ASC") List<String> sortBy,
      @QueryParam("page") @DefaultValue("0") Integer page,
      @QueryParam("pageSize") @DefaultValue("1000") Integer pageSize) {

    var sort = SortField.fromSortBy(sortBy);
    var result = repository.find(sort, new Pagination(page, pageSize));
    return Response.ok(result.results)
        .header("X-Total-Pages", result.totalPages)
        .header("X-Total-Elements", result.totalElements)
        .build();
  }

  @DELETE
  @Path("/{vuln_id}")
  public Response delete(@PathParam("vuln_id") String id) {
    repository.delete("_id", id);
    return Response.ok().build();
  }

  @GET
  @Path("/{vuln_id}")
  public Vulnerability get(@PathParam("vuln_id") String id) {
    var vuln = repository.findById(id);
    if (vuln == null) {
      throw new NotFoundException("No description found for vulnerability with id: " + id);
    }
    return vuln;
  }

  @GET
  @Path("/generate-comments-template")
  public Response generateUserCommentsTemplate() throws JsonProcessingException {
    return Response.ok(objectMapper.writeValueAsString(userComments)).build();
  }
}
