import { ActionGroup, Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, FormHelperText, HelperText, HelperTextItem, PageSection, Content, TextArea, TextInput, ContentVariants } from "@patternfly/react-core";
import { Link } from "react-router-dom";
import { useNavigate, useParams } from "react-router-dom";
import {setVulnerability, getVulnerability, generateUserCommentsTemplate} from "./services/VulnerabilityClient";
import ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';

const NEW = "new";

export default function Vulnerability() {
  const MANDATORY_ID_MSG = "Please enter a valid CVE id";
  const INVALID_ID_MSG = "Invalid format. Must be a valid CVE";
  const CVE_REGEX = /CVE-[0-9]{4}-[0-9]+/;
  const params = useParams();
  const [id, setId] = React.useState('');
  const [comments, setComments] = React.useState('');
  const [idValidationText, setIdValidationText] = React.useState('');
  const [validated, setValidated] = React.useState(false);

  const navigate = useNavigate();

  const validateId = (newId) => {
    if(!newId) {
      setIdValidationText(MANDATORY_ID_MSG);
      setValidated(false);
    } else if(!newId.match(CVE_REGEX)) {
      setIdValidationText(INVALID_ID_MSG);
      setValidated(false);
    } else {
      setIdValidationText('');
      setValidated(true);
    }
  }

  const handleIdChange = (_, newId) => {
    setId(newId);
    validateId(newId);
  }

  const saveComments = () => {
    if(validateId() !== "") {
      setVulnerability(id, comments).then(r => navigate('/vulnerabilities'));
    }
  }

  const generateTemplate = () => {
    generateUserCommentsTemplate(id, comments).then(result => {
      if (result) {
        setComments(JSON.stringify(result, null, 2));
      }
    });
  };

  React.useEffect(() => {
    if (params.id !== NEW) {
      setId(params.id);
      getVulnerability(params.id).then(vuln => {
        if(vuln) {
          setComments(vuln.comments);
        } else {
          setComments('');
        }
      });
    }
  }, [params]);

  const form = <Form isHorizontal >
    {params.id === NEW ?
      <>
        <Content>
          <Content component={ContentVariants.h1}>Add a new vulnerability</Content>
        </Content>
        <FormGroup isRequired label="Id" fieldId="form-id">
          <TextInput id="form-id" value={id} onChange={handleIdChange} />
          <FormHelperText>
          <HelperText>
            <HelperTextItem variant="error" {...(validated === 'error' && { icon: <ExclamationCircleIcon /> })}>
              {idValidationText}
            </HelperTextItem>
          </HelperText>
        </FormHelperText>
        </FormGroup>
      </>
      : <Content>
        <Content component={ContentVariants.h1}>Edit {params.id}</Content>
      </Content>}
    <FormGroup label="Comments" fieldId="form-comments">
      <TextArea id="form-comments" value={comments} onChange={(e) => setComments(e.target.value)} />
    </FormGroup>
    <ActionGroup>
      <Button onClick={saveComments} variant="primary">Save</Button>
      <Button variant="link" component={Link} to="/vulnerabilities">Cancel</Button>
      <Button onClick={generateTemplate} variant="primary">Generate Template</Button>
    </ActionGroup>
  </Form>

  return <PageSection hasBodyWrapper={false} >
    <Breadcrumb style={{ marginBottom: '1.5rem' }}>
      <BreadcrumbItem to="#/vulnerabilities">Vulnerabilities</BreadcrumbItem>
      <BreadcrumbItem>{params.id}</BreadcrumbItem>
    </Breadcrumb>
    {form}
  </PageSection>;
};